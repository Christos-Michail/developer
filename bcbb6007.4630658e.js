(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{102:function(e,t,a){"use strict";a.d(t,"a",(function(){return m})),a.d(t,"b",(function(){return d}));var n=a(0),i=a.n(n);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function b(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=i.a.createContext({}),c=function(e){var t=i.a.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},m=function(e){var t=c(e.components);return i.a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},u=i.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,r=e.parentName,s=b(e,["components","mdxType","originalType","parentName"]),m=c(a),u=n,d=m["".concat(r,".").concat(u)]||m[u]||p[u]||l;return a?i.a.createElement(d,o(o({ref:t},s),{},{components:a})):i.a.createElement(d,o({ref:t},s))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,r=new Array(l);r[0]=u;var o={};for(var b in t)hasOwnProperty.call(t,b)&&(o[b]=t[b]);o.originalType=e,o.mdxType="string"==typeof e?e:n,r[1]=o;for(var s=2;s<l;s++)r[s]=a[s];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,a)}u.displayName="MDXCreateElement"},89:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return r})),a.d(t,"metadata",(function(){return o})),a.d(t,"toc",(function(){return b})),a.d(t,"default",(function(){return c}));var n=a(3),i=a(7),l=(a(0),a(102)),r={title:"Norms",sidebar_label:"Norms"},o={unversionedId:"tech/conversation/norms",id:"tech/conversation/norms",isDocsHomePage:!1,title:"Norms",description:"A norm is a set of conditions that if they are satisfied provokes that has to do a set of actions,",source:"@site/docs/tech/conversation/norms.md",slug:"/tech/conversation/norms",permalink:"/developer/docs/tech/conversation/norms",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/tech/conversation/norms.md",version:"current",lastUpdatedAt:1623838522,sidebar_label:"Norms",sidebar:"tech",previous:{title:"Models",permalink:"/developer/docs/tech/conversation/models"},next:{title:"Ask for Help",permalink:"/developer/docs/tech/usecase/ask-for-help"}},b=[{value:"Protocol actions",id:"protocol-actions",children:[{value:"Create a task",id:"create-a-task",children:[]},{value:"Do a task transaction",id:"do-a-task-transaction",children:[]},{value:"Send an incentive",id:"send-an-incentive",children:[]},{value:"Received message",id:"received-message",children:[]},{value:"Received event",id:"received-event",children:[]}]},{value:"Conditions",id:"conditions",children:[{value:"Message conditions",id:"message-conditions",children:[]},{value:"Users conditions",id:"users-conditions",children:[]},{value:"Me conditions",id:"me-conditions",children:[]},{value:"Application conditions",id:"application-conditions",children:[]},{value:"Community conditions",id:"community-conditions",children:[]},{value:"Task conditions",id:"task-conditions",children:[]},{value:"Social context builder conditions",id:"social-context-builder-conditions",children:[]},{value:"Time conditions",id:"time-conditions",children:[]},{value:"JSON conditions",id:"json-conditions",children:[]}]},{value:"Actions",id:"actions",children:[{value:"User actions",id:"user-actions",children:[]},{value:"Community actions",id:"community-actions",children:[]},{value:"Task actions",id:"task-actions",children:[]},{value:"Interact with WeNet components",id:"interact-with-wenet-components",children:[]}]},{value:"Other Useful Norms predicates",id:"other-useful-norms-predicates",children:[{value:"Facts",id:"facts",children:[]},{value:"Logs messages",id:"logs-messages",children:[]},{value:"HTTP interaction",id:"http-interaction",children:[]},{value:"Utils",id:"utils",children:[]},{value:"Profile manager",id:"profile-manager",children:[]},{value:"Task manager",id:"task-manager",children:[]},{value:"Interaction protocol engine",id:"interaction-protocol-engine",children:[]},{value:"Service",id:"service",children:[]},{value:"Incentive server",id:"incentive-server",children:[]},{value:"Social context builder",id:"social-context-builder",children:[]},{value:"Personal context builder",id:"personal-context-builder",children:[]}]}],s={toc:b};function c(e){var t=e.components,a=Object(i.a)(e,["components"]);return Object(l.b)("wrapper",Object(n.a)({},s,a,{components:t,mdxType:"MDXLayout"}),Object(l.b)("p",null,"A norm is a set of conditions that if they are satisfied provokes that has to do a set of actions,\nand with this mechanism is controlled the interactions in the WeNet platform. These interactions\nare modelled as messages between WeNet users or between a component and a WeNet user. The component\nthat do this is the WeNet interaction protocol engine. This component is formed by a set of norm engines,\nwhere each one is responsible to get the norms to evaluate from the point of view of a user and to do\nthe actions of the norms that will be satisfied. In other words, each user on the WeNet platform has\nits norm engine to evaluate the actions that a user do or the notification that it can receive.\nThe norms are defined on the profile of the user, on the community that the user is, into the task\nthat the user is involved in and in the same message. The norm engine of each user decided with norms\nhas to be evaluated depending on the interaction and the status of the user. These norm engines are\nin rest mode and when a message is received, they collect the necessary norms evaluate them and do\nthe actions of the norms that are satisfied. The messages that start a norm engine are associated\nwith one of the next actions:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Create a task"),": When a user wants to create a task."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Do transaction"),": When a user wants to modify a task."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Send Incentive"),": When the incentive server wants to send an incentive to a user."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Received a message"),": When a norm engine receives a message from another norm engine."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Received an event"),": When a norm engine notifies himself of an event.")),Object(l.b)("p",null,"On the other hand, the norms are formed by a set of conditions that if they are satisfied execute\na set of actions associated with it. A grosso modo the conditions check the action that has started\nthe norm engine or the status of the user, and the actions can send a message to the user associated\nwith the norm engine or send a message to the norm engine of another user. "),Object(l.b)("p",null,"The norm engine is developed in ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.swi-prolog.org/"}),"SWI Prolog"),", so this is the language\nthat is used to define the norms. The norm and action as defined as predicates. A predicate is like\na function that starts with a lower case letter followed by letters, numbers or the underscore\nand after that between parenthesis are the arguments of the action or the condition separated\nby commas. For example:"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-prolog"}),"get_task_attribute_value(StartTime,'startTime')\n")),Object(l.b)("p",null,"The data model of a norm is defined in JSON, and it has the next fields:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"whenever")," is used to define the conditions that have to satisfy to fire the actions.\nEach condition can be separated by the conjunctions ",Object(l.b)("strong",{parentName:"li"},"and"),", ",Object(l.b)("strong",{parentName:"li"},"or")," or ",Object(l.b)("strong",{parentName:"li"},"not"),"."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"thenceforth")," is used to define the actions to do if the conditions are satisfied.\nEach action is separated by the conjunction ",Object(l.b)("strong",{parentName:"li"},"and"),"."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"ontology")," is used to define new prolog predicates that can be used in any condition\nor action of a norm. If the predicate can be used as an action you must define it as ",Object(l.b)("strong",{parentName:"li"},"dynamic"),".")),Object(l.b)("p",null,"The next example is the JSON representation of a norm to send an error to the user if try to create a task\nwith the start time less than or equals to now."),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n "whenever": "is_received_created_task() and get_task_attribute_value(StartTime,startTime) and is_now_greater_than_or_equal_to(StartTime)",\n "thenceforth": "close_task() and send_error(\'cannot_create_task_with_bad_startTime\')",\n "ontology": ":- dynamic send_error/1. send_error(Code) :- get_task_id(TaskId), send_user_message(\'Error\',json([code=Code,taskId=TaskId]))."\n}\n')),Object(l.b)("p",null,"As you can see the arguments of the conditions or the actions can be a ",Object(l.b)("strong",{parentName:"p"},"variable")," or a value. A variable starts\nwith an upper case letter followed by letters, numbers or the underscore. ATTENTION, the variables\nonly be associated with a value. In other words, when a variable is associated with a value, it can not be changed\nin all the norm. So, if you want to change the value of a variable you must define a new variable. The values\nas argument of the predicate or a value of a variable can be:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"A ",Object(l.b)("strong",{parentName:"li"},"Boolean")," value that can be ",Object(l.b)("inlineCode",{parentName:"li"},"true")," or ",Object(l.b)("inlineCode",{parentName:"li"},"false"),"."),Object(l.b)("li",{parentName:"ul"},"A ",Object(l.b)("strong",{parentName:"li"},"Number")," value that can represent any integer or floating-point number. For example: ",Object(l.b)("inlineCode",{parentName:"li"},"-1.34")," or ",Object(l.b)("inlineCode",{parentName:"li"},"89")),Object(l.b)("li",{parentName:"ul"},"A ",Object(l.b)("strong",{parentName:"li"},"String")," value is a sequence of any characters between single quotes (",Object(l.b)("inlineCode",{parentName:"li"},"'"),") or a sequence of characters that\nstarts with a lower case followed by letters, numbers or the underscore. For example: ",Object(l.b)("inlineCode",{parentName:"li"},"'String value'")," or ",Object(l.b)("inlineCode",{parentName:"li"},"id"),"."),Object(l.b)("li",{parentName:"ul"},"An ",Object(l.b)("strong",{parentName:"li"},"Array")," value is a list of values between quadratus and separated by commas. For example: ",Object(l.b)("inlineCode",{parentName:"li"},"['One',2,[3,'three']]")),Object(l.b)("li",{parentName:"ul"},"A ",Object(l.b)("strong",{parentName:"li"},"Json")," value that is mapped as the predicate ",Object(l.b)("inlineCode",{parentName:"li"},"json")," and with an array as an argument where its elements\nare pairs of field name and value separated by an equals. For example: ",Object(l.b)("inlineCode",{parentName:"li"},"json([id='1',goal=json([name='Eat together'])])"),".\nYou can read more about the conversion from JSON to a predicate ",Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.swi-prolog.org/pldoc/doc_for?object=json_read/2"}),"here"),".\nAttention if the field name does not start with a lower case followed for letters, numbers or the underscore,\nit must be written as a string between single quotes. For example: ",Object(l.b)("inlineCode",{parentName:"li"},"json(['Action'='Questions 1','Message'=''])")),Object(l.b)("li",{parentName:"ul"},"An underscore (",Object(l.b)("inlineCode",{parentName:"li"},"_"),") to mark that it accepts any value. In other words, that the value that matches\nthis position is ignored.")),Object(l.b)("p",null,"As you have read before the norms are defined in different data models in the WeNet platform. The norms that affect\nany interaction that a user is involved in are defined on the profile of the user. You can modify these norms by doing\nan HTTP CRUD request over the WeNet profile manager. For the interaction that does any user in a community, the norms\nare defined on the community profile. You can modify these norms by doing an HTTP CRUD request over the WeNet profile manager.\nFor modifying the logic that is involved in a task you must modify the norms defined on the task and its type using\nHTTP CRUD requests over the task manager."),Object(l.b)("h2",{id:"protocol-actions"},"Protocol actions"),Object(l.b)("p",null,"Before you have read that the norm engine is activated for one of the five possible actions, now you can read more about\nwhat happens when each of these actions happens."),Object(l.b)("h3",{id:"create-a-task"},"Create a task"),Object(l.b)("p",null,"When a user wants to create a task to do interact with the user interface of the application. This converts this\ninto an HTTP request to the WeNet service component. This component checks the authentication and authorization\nof the user that runs the application. If it is valid the service component calls the WeNet task manager with the task\nto create. This component checks that the new task is valid and if it is then the task is stored and finally it calls\nthe WeNet interaction protocol engine to inform that a task is created. This last one gets the norms of the user that\ncreate the task, the norms of the community where is defined the task, the norms of the task type associated with the task,\nand the norms of the task, and start a new norm engine to validate this tasks. From this point what happens depends\non the fired norms and their associated actions. But normally what happens is that will be fired a set of norms that decide\nwhich of the WeNet users will collaborate to do the created task. These actions normally send a message to each norm engine\nof the selected users. Then each norm engine collects the norms of the user, the community, the task type, and the task\nand decides the message to send to the user. When is decided this message is posted as an HTTP to the message callback\nof the application where the task is created. An then the user interface of the application show that it is selected\nto participate in the task."),Object(l.b)("p",null,"The task validation by the WeNet task manager consists of verifying:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"If an identifier is set that is not already defined and it has less than 255 characters. If it is not set\nthe task manager will set a unique identifier to the task."),Object(l.b)("li",{parentName:"ul"},"That it has a task type, that this type exists and that the attributes of the task follow the possible attributes\ndefined on the type."),Object(l.b)("li",{parentName:"ul"},"That the user that wants to create the task (requester) has a profile on the WeNet platform."),Object(l.b)("li",{parentName:"ul"},"That the application associated with the task exists."),Object(l.b)("li",{parentName:"ul"},"That the community associated with the task exists, or if it is not set it assigns the default community\nof the application where the task is added."),Object(l.b)("li",{parentName:"ul"},"That the user defines the name of the goal. It can not be larger than 255 characters. If you want to write something\nlarger you can add this extra information on the goal description that its maximum is 1023 characters.")),Object(l.b)("h3",{id:"do-a-task-transaction"},"Do a task transaction"),Object(l.b)("p",null,"When a user wants to interact in a task it has to do a task transaction. This begins with an interaction on the user\ninterface of the application, that is converted into an HTTP request to the WeNet service component. This component\nchecks the authentication and authorization of the user that runs the application. If it is valid the service component\ncalls the WeNet task manager with the transaction to do. This component checks that the transaction is valid and if it is\ncalls the WeNet interaction protocol engine to inform about the transaction to do. This last one gets the norms of the user\nthat do the transaction, the norms of the community of the task, the norms of the task type associated with the task,\nand the norms of the task and start a new norm engine to validate this transaction. From this point what happens depends\non the fired norms and their associated actions. But normally what happens is that will be fired a set of norms that\nchanges the state of the user or the task and notify of these changes to the norm engines of the other users that\nparticipate in the task. The notified norm engines get again the norms by with the norms of the user that represents\nand as result send a callback message to the user, that will be converted into an event on the user interface of the user\napplication."),Object(l.b)("p",null,"The task transaction validation by the WeNet task manager consists of verifying:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"That the task associated with the transaction is defined."),Object(l.b)("li",{parentName:"ul"},"That the agent that does the transaction has a profile on the WeNet platform."),Object(l.b)("li",{parentName:"ul"},"That the label and attributes of the transaction match any of the possibles defined by the task type associated\nwith the task of the transaction.")),Object(l.b)("h3",{id:"send-an-incentive"},"Send an incentive"),Object(l.b)("p",null,"When the WeNet incentive server wants to send an incentive to a user it posted an HTTP request to the WeNet interaction\nprotocol engine with the incentive to send to the user. This component validates the incentive and if it is valid gets\nthe norms of the user and the norms of the community of the application with in the incentive. And after that\nstart the norm engine to decide what to do next depending on the norms that will be fired. Normally this norms\nconverts the incentive into a callback message that is sent to the application of the user, which converts the message\ninto an event on the user interface of the user."),Object(l.b)("p",null,"The incentive validation by the WeNet interaction protocol engine consists of verifying:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"That the task associated with the transaction is defined."),Object(l.b)("li",{parentName:"ul"},"That the agent that does the transaction has a profile on the WeNet platform."),Object(l.b)("li",{parentName:"ul"},"That the label and attributes of the transaction match any of the possibles defined by the task type associated\nwith the task of the transaction.")),Object(l.b)("h3",{id:"received-message"},"Received message"),Object(l.b)("p",null,"When a norm engine wants to notify the norm engine of another user it posted an HTTP request to the WeNet interaction\nprotocol engine, which validates the message and passes it through to the norm engine of the user. It obtains the norms\nassociated with the message and validates them to known with actions to do next, as you can read on the previous actions."),Object(l.b)("h3",{id:"received-event"},"Received event"),Object(l.b)("p",null,"An event is a message that a norm engine is sent to itself after a delay in seconds. It is used to activate the norm\nengine and evaluate again the norms. For example: imagine a task that you want to close after a day, then you may define a\nnorm that when the task is created send an event to be delivered after a day, and another norm to close the task when\nthis event is received."),Object(l.b)("h2",{id:"conditions"},"Conditions"),Object(l.b)("p",null,"The norms are formed by a list of conditions separated by the conjunctions ",Object(l.b)("inlineCode",{parentName:"p"},"and")," or ",Object(l.b)("inlineCode",{parentName:"p"},"or"),", or negated using\nthe predicate ",Object(l.b)("inlineCode",{parentName:"p"},"not(Condition)"),". You can use any predicate defined by the ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.swi-prolog.org/"}),"SWI Prolog"),".\nThe next sections show the most common conditions that have been provided to help to the norm definition."),Object(l.b)("h3",{id:"message-conditions"},"Message conditions"),Object(l.b)("p",null,"The next conditions are used to check the protocol message that has started the norm engine."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"is_received_created_task()"),"\nThis condition is ",Object(l.b)("strong",{parentName:"li"},"true")," when the message informs that a task is created."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"is_received_do_transaction(Label,Attributes)"),"\nThis condition is ",Object(l.b)("strong",{parentName:"li"},"true")," when the message informs that a user wants to do a transaction.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Label"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string with the transaction label."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Attributes"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  JSON model with the transaction attributes."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"is_received_send_incentive(Incentive)"),"\nThis condition is ",Object(l.b)("strong",{parentName:"li"},"true")," when the message is sent by the incentive server to notify a user.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Incentive"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  JSON model with the incentive to notify to the user."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"is_received(SenderId,Particle,Content)"),"\nThis condition is ",Object(l.b)("strong",{parentName:"li"},"true")," when the message is from another norm engine.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"SenderId"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string with the user identifier that has sent the message."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Particle"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string with the message particle."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Content")," ",Object(l.b)("em",{parentName:"li"},"Output"),"  JSON model with the message content."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"is_received_event(Particle,Content)"),"\nThis condition is ",Object(l.b)("strong",{parentName:"li"},"true")," when the received message is an event.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Particle"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string with the event particle."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Content")," ",Object(l.b)("em",{parentName:"li"},"Output"),"  JSON model with the event content.")))),Object(l.b)("h3",{id:"users-conditions"},"Users conditions"),Object(l.b)("p",null,"The next conditions are used to manage the users that can be involved in a task. On this condition ",Object(l.b)("strong",{parentName:"p"},"me")," refers\nto the user of the norm engine that has been started."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"get_app_users(Users)"),"\nThis condition is used to obtain the users that are on the application.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Users"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  array of strings with the identifiers of the users that are in the application."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"get_app_users_except_me(Users)"),"\nThis condition is used to obtain the users that are on the application removing the identifier of the user\nassociated with the norm engine.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Users"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  array of strings with the identifiers of the users."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"get_closest_users_to_me(Users)"),"\nThis condition is used to obtain the users, maximum 10, that are closest to the user associated\nto the norm engine.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Users"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  array of strings with the identifiers of the users."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"get_closest_users_to_me(Users,NumUsers)"),"\nThis condition is used to obtain the users that are closest to the user associated with the norm engine.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Users"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  array of strings with the identifiers of the users."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"NumUsers"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  number maximum of users to return."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"get_app_users_near_me(Users,Min,Max)"),"\nThis condition is used to obtain the users on the application that are in a range to the user associated with\nthe norm engine. Thus, it returns the application users that are in a distance ",Object(l.b)("strong",{parentName:"li"},"[Min, Max]")," to me.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Users"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  array of strings with the identifiers of the users."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Min"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  number the minimum distance in meters to the user associated with the norm engine."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Max"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  number the maximum distance in meters to the user associated with the norm engine.")))),Object(l.b)("h3",{id:"me-conditions"},"Me conditions"),Object(l.b)("p",null,"The next conditions are over the user associated with the norm engine (",Object(l.b)("strong",{parentName:"p"},"me"),"). "),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"get_profile_id(Me)"),"\nThis condition is used to obtain the identifier to the user associated with the norm engine.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Me"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string with the identifier of the user.\t"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"get_profile(Profile)"),"\nThis condition is used to obtain the profile of the user associated with the norm engine at the moment it is started.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Profile"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"   JSON model with the profile."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"get_user_state(State)"),"\nThis condition obtains the state of the user. This state is shared by all the norm engines\nassociated with ",Object(l.b)("strong",{parentName:"li"},"me"),".",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"State"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  JSON model with the user state."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"get_user_state_attribute(Value,Key)"),"\nThis condition obtains the value of a user state attribute. If it is not defined this predicate fails.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Value"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  value associated with the attribute."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Key"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the name of the attribute."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"get_user_state_attribute(Value,Key,DefaultValue)"),"\nThis condition obtains the value of a user state attribute, or a default value if it is not defined.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Value"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  value associated with the attribute or the default one if it is not defined."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Key"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the name of the attribute."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"DefaultValue"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  value to return if the attribute is not defined.")))),Object(l.b)("h3",{id:"application-conditions"},"Application conditions"),Object(l.b)("p",null,"The next conditions are over the application associated with the norm engine. "),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"get_app_id(AppId)"),"\nThis condition is used to obtain the identifier to the application associated with the norm engine.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"AppId"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string with the identifier of the application.\t"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"get_app(App)"),"\nThis condition obtains the model data of the application associated with the norm engine. The data model\nis obtained the first time this condition is called, after that the value is fixed.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"App"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  JSON model with the application data."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"get_app_message_callback_url(Url)"),"\nThis condition obtains the URL to post the messages to send to the user into the application\nassociated with the norm engine. The URL is obtained the first time this condition is called, after that\nthe value is fixed.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Url"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string to the URL to post the callback messages.")))),Object(l.b)("h3",{id:"community-conditions"},"Community conditions"),Object(l.b)("p",null,"The next conditions are over the community associated with the norm engine."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"get_community_id(CommunityId)"),"\nThis condition is used to obtain the identifier to the community associated with the norm engine.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"CommunityId"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string with the identifier of the community.\t"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"get_community(Community)"),"\nThis condition obtains the model data of the community associated with the norm engine. The data model\nis obtained the first time this condition is called, after that the value is fixed.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Community"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  JSON model with the community data."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"get_community_state(State)"),"\nThis condition obtains the state of the user in the community associated with the norm engine.\nThis state is shared by all the norm engines associated with the user for the same community.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"State"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  JSON model with the community user state."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"get_community_state_attribute(Value,Key)"),"\nThis condition obtains the value of a community user state attribute. If it is not defined this predicate fails.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Value"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  value associated with the attribute."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Key"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the name of the attribute."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"get_community_state_attribute(Value,Key,DefaultValue)"),"\nThis condition obtains the value of a community user state attribute, or a default value if it is not defined.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Value"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  value associated with the attribute or the default one if it is not defined."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Key"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the name of the attribute."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"DefaultValue"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  value to return if the attribute is not defined.")))),Object(l.b)("h3",{id:"task-conditions"},"Task conditions"),Object(l.b)("p",null,"The next conditions are over the task associated with the norm engine. "),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"get_task_id(TaskId)"),"\nThis condition is used to obtain the identifier to the task associated with the norm engine.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"TaskId"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string with the identifier of the task.\t"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"get_task(Task)"),"\nThis condition is used to obtain the task associated with the norm engine at the moment it is started.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Task"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"   JSON model with the task."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"get_task_requester_id(RequesterId)"),"\nThis condition obtains the requester identifier of the task associated with the norm engine.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"RequesterId"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string with the task requester identifier."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"get_task_goal_name(Name)"),"\nThis condition obtains the goal name of the task associated with the norm engine.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Name"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string with the task goal name."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"is_task_closed()"),"\nThis condition is ",Object(l.b)("strong",{parentName:"li"},"true")," when the task associated with the norm engine is closed."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"get_task_attribute_value(Value,Key)"),"\nThis condition obtains the value of a task attribute. If it is not defined this predicate fails.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Value"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  value associated with the attribute."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Key"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the name of the attribute."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"get_task_state(State)"),"\nThis condition obtains the state of the user in the task associated with the norm engine.\nThis state is shared by all the norm engines associated with the user for the same task.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"State"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  JSON model with the task user state."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"get_task_state_attribute(Value,Key)"),"\nThis condition obtains the value of a task user state attribute. If it is not defined this predicate fails.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Value"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  value associated with the attribute."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Key"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the name of the attribute."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"get_task_state_attribute(Value,Key,DefaultValue)"),"\nThis condition obtains the value of a task user state attribute, or a default value if it is not defined.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Value"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  value associated with the attribute or the default one if it is not defined."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Key"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the name of the attribute."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"DefaultValue"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  value to return if the attribute is not defined."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"get_task_type_id(TaskTypeId)"),"\nThis condition obtains the type identifier for the task associated with the task of the norm engine.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"TaskTypeId"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"   string with the task type identifier."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"get_task_type(TaskType)"),"\nThis condition is used to obtain the type of task associated with the norm engine at the moment it is started.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"TaskType"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"   JSON model with the task type."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"get_transaction_id(TransactionId)"),"\nThis condition is used to obtain the identifier of the transaction associated with the norm engine or the identifier\nof the last transaction added to the task associated with the norm engine.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"TransactionId"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string transaction identifier."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"get_transaction(Transaction)"),"\nThis condition is used to obtain the task transaction associated with the norm engine at the moment it is started,\nor return the last transaction added to the task associated with the norm engine.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Task"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"   JSON model with the task."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"get_transaction(Transaction,TransactionId)"),"\nThis condition is used to obtain the task transaction defined into the task associated with the norm engine.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Transaction"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  JSON model with the transaction"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"TransactionId"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string identifier of the task transaction to obtain.")))),Object(l.b)("h3",{id:"social-context-builder-conditions"},"Social context builder conditions"),Object(l.b)("p",null,"The next conditions are over the application associated with the norm engine (",Object(l.b)("strong",{parentName:"p"},"me"),"). "),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"get_social_explanation(Explanation,UserId)"),"\nThis condition obtains the explanation why a user has to be chosen to be a volunteer.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Explanation"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  JSON model with the explanation provided by the social context builder."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"UserId"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string identifier of the user to obtain the explanation.")))),Object(l.b)("h3",{id:"time-conditions"},"Time conditions"),Object(l.b)("p",null,"The next conditions are over the constant ",Object(l.b)("strong",{parentName:"p"},"now"),", that it is the difference, measured in seconds,\nbetween the time the norm engine is started and midnight, January 1, 1970, UTC."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"is_now_less_than(Time)"),"\nThis condition is ",Object(l.b)("strong",{parentName:"li"},"true")," when ",Object(l.b)("strong",{parentName:"li"},"now")," is less than a value.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Time"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  integer time in seconds to check."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"is_now_less_than_or_equal_to(Time)"),"\nThis condition is ",Object(l.b)("strong",{parentName:"li"},"true")," when ",Object(l.b)("strong",{parentName:"li"},"now")," is less than or equal to a value.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Time"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  integer time in seconds to check."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"is_now_greater_than(Time)"),"\nThis condition is ",Object(l.b)("strong",{parentName:"li"},"true")," when ",Object(l.b)("strong",{parentName:"li"},"now")," is greater than a value.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Time"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  integer time in seconds to check."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"is_now_greater_than_or_equal_to(Time)"),"\nThis condition is ",Object(l.b)("strong",{parentName:"li"},"true")," when ",Object(l.b)("strong",{parentName:"li"},"now")," is greater than or equal to a value.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Time"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  integer time in seconds to check."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"is_now_equal_to(Time)"),"\nThis condition is ",Object(l.b)("strong",{parentName:"li"},"true")," when ",Object(l.b)("strong",{parentName:"li"},"now")," is equal to a value.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Time"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  integer time in seconds to check.")))),Object(l.b)("h3",{id:"json-conditions"},"JSON conditions"),Object(l.b)("p",null,"The next conditions are used to manage JSON models."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"get_attribute(Value,Key,Json)"),"\nThis condition obtains an attribute (field) of a JSON model. If the attribute is not defined\nthis condition fails.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Value"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  value of the attribute."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Key"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string name of the attribute."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Json"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model to obtain the attribute."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"get_attribute(Value,Key,DefaultValue,Json)"),"\nThis condition obtains an attribute (field) of a JSON model. If the attribute is not defined\nit returns the default value.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Value"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  value of the attribute or the default value is not defined."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Key"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string name of the attribute."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"DefaultValue"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  value to return if it is not defined."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Json"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model to obtain the attribute.")))),Object(l.b)("h2",{id:"actions"},"Actions"),Object(l.b)("p",null,"The norms to do when the conditions of a norm are predicates separated by the conjunction ",Object(l.b)("inlineCode",{parentName:"p"},"and"),". You can use\nany predicate defined by the ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.swi-prolog.org/"}),"SWI Prolog"),", but before you have to mark it as ",Object(l.b)("inlineCode",{parentName:"p"},"dynamic"),"\non the ontology of the norm. The next sections show the most common actions that have been provided to help\nto the norm definition."),Object(l.b)("h3",{id:"user-actions"},"User actions"),Object(l.b)("p",null,"These actions are done over the user that is associated with the norm engine, thus the receiver user of the message."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"send_user_message(Label,Content)"),"\nThis action posts a callback message to the user.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Label")," ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the message label."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Content")," ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model with the message content."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"merge_user_state(State)"),"\nThis action merges the current state of the user.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"State"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model with the new state of the user."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"put_user_state_attribute(Key,Value)"),"\nThis action changes an attribute of the state of the user.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Key"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the name of the state attribute."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Value"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  value to put to the attribute of the state.")))),Object(l.b)("h3",{id:"community-actions"},"Community actions"),Object(l.b)("p",null,"These actions are done over the community that is associated with the received message."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"merge_community_state(State)"),"\nThis action merges the current state of the user for the community.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"State"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model with the new state of the user on the community."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"put_community_state_attribute(Key,Value)"),"\nThis action changes an attribute of the state of the user for the community.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Key"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the name of the state attribute."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Value"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  value to put to the attribute of the state.")))),Object(l.b)("h3",{id:"task-actions"},"Task actions"),Object(l.b)("p",null,"These actions are done in the task that is associated with the received message."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"add_created_transaction()"),"\nThis action adds a new transaction to the task that represents that the creation\nof the task."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"add_message_transaction()"),"\nThis action adds the transaction defined on the received message into the task."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"put_task_attribute(Key,Value)"),"\nThis action changes an attribute of the current task model.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Key"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the name of the task attribute."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Value"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  value to put to the task attribute."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"merge_task(Task)"),"\nThis action modifies the current task model.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Task"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model with the new values for the task."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"close_task()"),"\nThis action marks the task associated with the norm engine as closed."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"merge_task_state(State)"),"\nThis action merges the current state of the user for the task.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"State"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model with the new state of the user on the task."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"put_task_state_attribute(Key,Value)"),"\nThis action changes an attribute of the state of the user for the task.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Key"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the name of the state attribute."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Value"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  value to put to the attribute of the state.")))),Object(l.b)("h3",{id:"interact-with-wenet-components"},"Interact with WeNet components"),Object(l.b)("p",null,"These actions interact with the other components of the WeNet platform."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"send_messages(Users,Particle,Content)"),"\nThis action sends messages to the norm engines of some users.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Users"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  array of strings of the users to receive a message."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Particle"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the message particle."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Content"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model with the message content."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"send_message(UserId,Particle,Content)"),"\nThis action sends a message to the norm engines of a user.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"UserId"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  strings identifier of the user to receive the message."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Particle"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the message particle."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Content"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model with the message content."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"notify_incentive_server(Action,Message)"),"\nThis action notifies the incentive server about a change of the task.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Action"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the action that has changed the task."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Message"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string that explains the change."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"notify_volunteers_to_social_context_builder(Volunteers,UserId)"),"\nThis action notifies the social context builder about the volunteers to do a task.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Volunteers"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  array of strings with the user identifiers that has volunteer to do a task."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"UserId"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string user identifier to be a volunteer.")))),Object(l.b)("h2",{id:"other-useful-norms-predicates"},"Other Useful Norms predicates"),Object(l.b)("p",null,"We provide other predicates that can be used to help to define the conditions and the actions of any norm."),Object(l.b)("h3",{id:"facts"},"Facts"),Object(l.b)("p",null,"The next predicates refer to facts (constants) that have been set when the norm engine has been started."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"get_message(Message)"),"\nThe fact with the received message that has started the norm engine.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Message"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  JSON model of the received protocol message."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"get_now(Time)"),"\nThe fact with the difference, measured in seconds, between the time the norm engine is started and\nmidnight, January 1, 1970, UTC.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Time"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  number with the started time in seconds."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_profile_manager_api_url(URL)"),"\nThe fact with the URL to the profile manager component.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"URL"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string with the profile manager API URL."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_task_manager_api_url(URL)"),"\nThe fact with the URL to the task manager component.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"URL"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string with the task manager API URL."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_interaction_protocol_engine_api_url(URL)"),"\nThe fact with the URL to the interaction protocol engine component.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"URL"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string with the tinteraction protocol engine API URL."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_social_context_builder_api_url(URL)"),"\nThe fact with the URL to the social context builder component.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"URL"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string with the social context builder API URL."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_service_api_url(URL)"),"\nThe fact with the URL to the service component.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"URL"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string with the service API URL."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_incentive_server_api_url(URL)"),"\nThe fact with the URL to the incentive server component.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"URL"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string with the incentive server API URL."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_personal_context_builder_api_url(URL)"),"\nThe fact with the URL to the personal context builder component.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"URL"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string with the personal context builder API URL.")))),Object(l.b)("h3",{id:"logs-messages"},"Logs messages"),Object(l.b)("p",null,"The next predicates are used to add messages to the logging files of the norm engine."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_log_trace(Text)"),"\nThis predicate adds a message to the trace log.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Text"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the trace log message."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_log_trace(Text,Terms)"),"\nThis predicate adds a message to the trace log with values.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Text"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the trace log message."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Terms")," ",Object(l.b)("em",{parentName:"li"},"Input")," value to append to the end of the message."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_log_error(Text)"),"\nThis predicate adds a message to the error log.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Text"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the error log message."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_log_error(Text,Terms)"),"\nThis predicate adds a message to the error log with values.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Text"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the error log message."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Terms")," ",Object(l.b)("em",{parentName:"li"},"Input")," value to append to the end of the message."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_log_error(Text,Terms,Error)"),"\nThis predicate adds a message to the error log with an exception.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Text"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the error log message."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Terms")," ",Object(l.b)("em",{parentName:"li"},"Input")," value to append to the end of the message."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Error")," ",Object(l.b)("em",{parentName:"li"},"Input")," exception to append to the end of the message.")))),Object(l.b)("h3",{id:"http-interaction"},"HTTP interaction"),Object(l.b)("p",null,"The next predicates are used to do HTTP request into an URL."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_get_json_from_url(Json,Url)"),"\nGet a model from an URL.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Json"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  JSOM model of the received model."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Url"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the URL to get the model."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_post_json_to_url(Json, Url, Body)"),"\nPost a model into an URL.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Json"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  JSOM model of the posted model."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Url"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the URL to post the model."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Body"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model with the model to post."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_put_json_to_url(Json, Url, Body)"),"\nPut a model into an URL.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Json"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  JSOM model of the puted model."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Url"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the URL to put the model."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Body"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model with the model to put."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_patch_json_to_url(Json, Url, Body)"),"\nPatch a model into an URL.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Json"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  JSOM model of the patched model."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Url"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the URL to patch the model."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Body"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model with the model to patch."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_delete_to_url(Url)"),"\nDelete a model from an URL.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Url"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the URL to delete the model.")))),Object(l.b)("h3",{id:"utils"},"Utils"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_remove(Result,Element,List)"),"\nThis predicate removes an element from an array.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Result"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  array of values without the element."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Element"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  value to remove."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"List"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  array of values to remove the element."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_add(Result,Element,List)"),"\nThis predicate adds an element to the end of an array.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Result"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  array of values where the element is added."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Element"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  value to add."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"List"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  array of values to add the element."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_format(Msg,WeNetFormat,Arguments)"),"\nThis predicate is used to create an string from a pattern. For the pattern ",Object(l.b)("strong",{parentName:"li"},"{}")," are replaced with\nthe argument on the same position. For example: ",Object(l.b)("inlineCode",{parentName:"li"},"wenet_format('Value One and 2','Value {} and {}',['One',2])"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Msg"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string where are replaced the values of the pattern."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"WeNetFormat"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the pattern to replace ",Object(l.b)("strong",{parentName:"li"},"{}")," with values."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Arguments")," ",Object(l.b)("em",{parentName:"li"},"Input"),"  array of values to be replaced on the pattern."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_math(Result,Expr)"),"\nThis predicate evaluates an arithmetical expression. You can read more about the arithmetical expressions\n",Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.swi-prolog.org/pldoc/man?section=functions"}),"here"),". For example: ",Object(l.b)("inlineCode",{parentName:"li"},"wenet_format(4,2+2)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Result"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  number with the result of the arithmetical expression."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Expr"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  mathematical expression to evaluate.")))),Object(l.b)("h3",{id:"profile-manager"},"Profile manager"),Object(l.b)("p",null,"The next predicates are used to interact with the profile manager component."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_profile_manager_api_url_to(Url,Paths)"),"\nThis predicate is used to obtain the URL to interact with the API of the profile manager.\nFor example if ",Object(l.b)("inlineCode",{parentName:"li"},"ProfileId = '2'")," and the URL of the profile manager API is\n",Object(l.b)("strong",{parentName:"li"},Object(l.b)("a",Object(n.a)({parentName:"strong"},{href:"https://wenet.u-hopper.com/prod/profile_manager"}),"https://wenet.u-hopper.com/prod/profile_manager"))," then ",Object(l.b)("inlineCode",{parentName:"li"},"wenet_profile_manager_api_url_to(Url,['/profiles/',ProfileId])"),"\nwill produce ",Object(l.b)("inlineCode",{parentName:"li"},"URL = 'https://wenet.u-hopper.com/prod/profile_manager/profiles/2'"),".",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Url"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string of the API point to the profile manager."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Paths"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  array of values used to build the API point."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_profile_manager_get_profile(Profile,Id)"),"\nThis predicate is used to obtain a profile.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Profile"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  JSON model with the obtained profile."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Id "),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the identifier of the profile to obtain."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_profile_manager_get_community(Community,Id)"),"\nThis predicate is used to obtain a community.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Profile"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  JSON model with the obtained community."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Id "),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the identifier of the community to obtain."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_id_of_profile(Id, Profile)"),"\nThis predicate obtains the identifier of a profile.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Id"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string with the identifier of the profile."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Profile"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model of the profile to obtain the identifier."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_id_of_community(Id, Community)"),"\nThis predicate obtains the identifier of a community.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Id"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string with the identifier of the community."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Community"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model of the community to obtain the identifier.")))),Object(l.b)("h3",{id:"task-manager"},"Task manager"),Object(l.b)("p",null,"The next predicates are used to interact with the task manager component."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_task_manager_api_url_to(Url,Paths)"),"\nThis predicate is used to obtain the URL to interact with the API of the task manager.\nFor example if ",Object(l.b)("inlineCode",{parentName:"li"},"TaskId = '2'")," and the URL of the task manager API is\n",Object(l.b)("strong",{parentName:"li"},Object(l.b)("a",Object(n.a)({parentName:"strong"},{href:"https://wenet.u-hopper.com/prod/task_manager"}),"https://wenet.u-hopper.com/prod/task_manager"))," then ",Object(l.b)("inlineCode",{parentName:"li"},"wenet_task_manager_api_url_to(Url,['/tasks/',TaskId])"),"\nwill produce ",Object(l.b)("inlineCode",{parentName:"li"},"URL = 'https://wenet.u-hopper.com/prod/task_manager/tasks/2'"),".",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Url"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string of the API point to the task manager."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Paths"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  array of values used to build the API point."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_task_manager_get_task(Task,Id)"),"\nThis predicate is used to obtain a task.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Task"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  JSON model with the obtained task."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Id "),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the identifier of the task to obtain."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_task_manager_merge_task(MergedTask,TaskId,Task)"),"\nThis predicate modifies a task model.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"MergedTask"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  JSON model with the updated task."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"TaskId"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the identifier of the task to modify."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Task"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model of the task to merge with the current one."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_task_manager_add_transaction_into_task(AddedTaskTransaction,TaskId,Transaction)"),"\nThis predicate is used to add a transaction into a task.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"AddedTaskTransaction"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  JSON model with the added transaction."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"TaskId"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the identifier of the task to add the transaction."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Transaction"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  JSON model of the transaction to add."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_task_manager_add_message_into_transaction(AddedTransactionMessage,TaskId,TransactionId,Message)"),"\nThis predicate is used to add a message into a transaction of a task.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"AddedTransactionMessage"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  JSON model with the added message."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"TaskId"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the identifier of the task where is the transaction."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"TransactionId"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the identifier of the transaction to add the message."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Message"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model with the message to add into the transaction."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_id_of_task(Id, Task)"),"\nThis predicate obtains the identifier of a task.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Id"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string with the identifier of the task."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Task"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model of the task to obtain the identifier."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_task_type_id_of_task(Id, Task)"),"\nThis predicate obtains the task type identifier of a task.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Id"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string with the identifier of the task type."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Task"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model of the task to obtain the task type identifier."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_app_id_of_task(Id, Task)"),"\nThis predicate obtains the application identifier of a task.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Id"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string with the identifier of the application."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Task"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model of the task to obtain the application identifier."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_community_id_of_task(Id, Task)"),"\nThis predicate obtains the community identifier of a task.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Id"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string with the identifier of the community."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Task"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model of the task to obtain the community identifier."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_requester_id_of_task(Id, Task)"),"\nThis predicate obtains the requester identifier of a task.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Id"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string with the identifier of the requester."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Task"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model of the task to obtain the requester identifier."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_goal_of_task(Goal, Task)"),"\nThis predicate obtains the goal of a task.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Goal"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  JSON model with the task goal."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Task"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model of the task to obtain the goal."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_goal_name_of_task(GoalName, Task)"),"\nThis predicate obtains the goal name of a task.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"GoalName"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string with the task goal name."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Task"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model of the task to obtain the goal name."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_goal_description_of_task(GoalDescription, Task)"),"\nThis predicate obtains the goal description of a task.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"GoalDescription"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string with the task goal description."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Task"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model of the task to obtain the goal description."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_goal_keywords_of_task(GoalKeywords, Task)"),"\nThis predicate obtains the goal keywords of a task.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"GoalKeywords"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  array of strings with the task goal keywords."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Task"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model of the task to obtain the goal keywords."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_is_closed_task(Task)"),"\nThis predicate is ",Object(l.b)("strong",{parentName:"li"},"true")," if the task is closed.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Task"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model of the task to check if it is closed."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_close_ts_of_task(CloseTs, Task)"),"\nThis predicate obtains the time-stamp when the task is closed.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"CloseTs"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  integer with the difference, in seconds, between the time when the task is closed\nand midnight, January 1, 1970, UTC."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Task"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model of the task to obtain the close time-stamp."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_attributes_of_task(Attributes, Task)"),"\nThis predicate obtains the attributes of a task.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Attributes"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  JSON model with the task attributes."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Task"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model of the task to obtain the attributes."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_transactions_of_task(Transactions, Task)"),"\nThis predicate obtains the transaction of a task.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Transactions"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  array of JSON models with the task transactions."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Task"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model of the task to obtain the transactions."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_id_of_transaction(Id, Transaction)"),"\nThis predicate obtains the identifier of a transaction.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Id"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string with the transaction identifier."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Transaction"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model of the transaction to obtain the identifier."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_task_id_of_transaction(TaskId, Transaction)"),"\nThis predicate obtains the task identifier of a transaction.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"TaskId"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string with the task identifier."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Transaction"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model of the transaction to obtain the task identifier."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_label_of_transaction(Label, Transaction)"),"\nThis predicate obtains the label of a transaction.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Label"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string with the transaction label."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Transaction"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model of the transaction to obtain the label."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_attributes_of_transaction(Attributes, Transaction)"),"\nThis predicate obtains the attributes of a transaction.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Attributes"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  JSON model with the transaction attributes."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Transaction"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model of the transaction to obtain the attributes."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_actioneer_id_of_transaction(ActioneerId,, Transaction)"),"\nThis predicate obtains the user that does a transaction.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"ActioneerId"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string with the transaction actioneer. Thus, the identifier\nof the user that has done the transaction."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Transaction"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model of the transaction to obtain the identifier."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_messages_of_transaction(Messages, Transaction)"),"\nThis predicate obtains the messages of a transaction.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Messages"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  array of JSON models with the transaction messages."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Transaction"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model of the transaction to obtain the messages.")))),Object(l.b)("h3",{id:"interaction-protocol-engine"},"Interaction protocol engine"),Object(l.b)("p",null,"The next predicates are used to interact with the interaction protocol engine component."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_interaction_protocol_engine_api_url_to(Url,Paths)"),"\nThis predicate is used to obtain the URL to interact with the API of the interaction protocol engine.\nFor example if ",Object(l.b)("inlineCode",{parentName:"li"},"UserId = '2'")," and the URL of the interaction protocol engine API is\n",Object(l.b)("strong",{parentName:"li"},Object(l.b)("a",Object(n.a)({parentName:"strong"},{href:"https://wenet.u-hopper.com/prod/interaction_protocol_engine"}),"https://wenet.u-hopper.com/prod/interaction_protocol_engine"))," then\n",Object(l.b)("inlineCode",{parentName:"li"},"wenet_interaction_protocol_engine_api_url_to(Url,['/states/users/',UserId])"),"\nwill produce ",Object(l.b)("inlineCode",{parentName:"li"},"URL = 'https://wenet.u-hopper.com/prod/interaction_protocol_engine/states/users/2'"),".",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Url"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string of the API point to the interaction protocol engine."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Paths"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  array of values used to build the API point."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_interaction_protocol_engine_send_message(Sent,Message)"),"\nThis predicate is used to send a message to the interaction protocol engine of another user.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Sent"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  JSON model with the sent message."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Message"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model with the message to send."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_interaction_protocol_engine_get_task_user_state(State,TaskId,UserId)"),"\nThis predicate is used to obtain the state of a user in a task.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"State"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  JSON model with the state of the user on the task."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"TaskId"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string identifier of the task to get the state."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"UserId"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string identifier of the user to get the state."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_interaction_protocol_engine_merge_task_user_state(MergedState,TaskId,UserId,NewState)"),"\nThis predicate is used to change the state of a user in a task.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"MergedState"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  JSON model with the modified state of the user on the task."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"TaskId"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string identifier of the task to modify the state."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"UserId"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string identifier of the user to modify the state."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"NewState"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model with the new values for the state."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_interaction_protocol_engine_get_community_user_state(State,CommunityId,UserId)"),"\nThis predicate is used to obtain the state of a user in a community.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"State"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  JSON model with the state of the user on the community."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"CommunityId"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string identifier of the community to get the state."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"UserId"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string identifier of the user to get the state."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_interaction_protocol_engine_merge_community_user_state(MergedState,CommunityId,UserId,NewState)"),"\nThis predicate is used to change the state of a user in a community.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"MergedState"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  JSON model with the modified state of the user on the community."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"CommunityId"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string identifier of the community to modify the state."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"UserId"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string identifier of the user to modify the state."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"NewState"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model with the new values for the state."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_interaction_protocol_engine_get_user_state(State,UserId)"),"\nThis predicate is used to obtain the state of a user.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"State"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  JSON model with the state of the user."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"UserId"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string identifier of the user to get the state."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_interaction_protocol_engine_merge_user_state(MergedState,UserId,NewState)"),"\nThis predicate is used to change the state of a user.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"MergedState"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  JSON model with the modified state of the user."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"UserId"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string identifier of the user to modify the state."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"NewState"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model with the new values for the state."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_app_id_of_protocol_message(AppId, Message)"),"\nThis predicate is used to obtain the identifier of the application of a message.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"AppId"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string with the application identifier of the message."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Message"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model with the message."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_community_id_of_protocol_message(CommunityId, Message)"),"\nThis predicate is used to obtain the identifier of the community of a message.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"CommunityId"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string with the community identifier of the message."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Message"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model with the message."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_task_id_of_protocol_message(TaskId, Message)"),"\nThis predicate is used to obtain the identifier of the task of a message.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"TaskId"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string with the task identifier of the message."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Message"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model with the message."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_transaction_id_of_protocol_message(TransactionId, Message)"),"\nThis predicate is used to obtain the identifier of the transaction of a message.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"TransactionId"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string with the transaction identifier of the message."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Message"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model with the message."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_sender_of_protocol_message(Sender, Message)"),"\nThis predicate is used to obtain the sender of a message.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"SenderComponent"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  JSON model with the sender of the message."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Message"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model with the message."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_sender_component_of_protocol_message(SenderComponent, Message)"),"\nThis predicate is used to obtain the sender component of a message.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"SenderComponent"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string with the sender component of the message."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Message"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model with the message."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_sender_id_of_protocol_message(SenderId, Message)"),"\nThis predicate is used to obtain the sender identifier of a message.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"SenderId"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string with the sender identifier of the message."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Message"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model with the message."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_receiver_of_protocol_message(Receiver, Message)"),"\nThis predicate is used to obtain the receiver of a message.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"ReceiverComponent"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  JSON model with the receiver of the message."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Message"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model with the message."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_receiver_component_of_protocol_message(ReceiverComponent, Message)"),"\nThis predicate is used to obtain the receiver component of a message.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"ReceiverComponent"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string with the receiver component of the message."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Message"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model with the message."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_receiver_id_of_protocol_message(ReceiverId, Message)"),"\nThis predicate is used to obtain the receiver identifier of a message.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"ReceiverId"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string with the receiver identifier of the message."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Message"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model with the message."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_particle_of_protocol_message(Particle, Message)"),"\nThis predicate is used to obtain the particle of a message.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Particle"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string with the particle of the message."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Message"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model with the message."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_content_of_protocol_message(Content, Message)"),"\nThis predicate is used to obtain the content of a message.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Content"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  JSON model with the content of the message."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Message"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model with the message."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_new_protocol_message(Message,AppId,CommunityId,TaskId,TransactionId,SenderComponent,SenderUserId,ReceiverComponent,ReceiverUserId,Particle,Content)"),"\nThis predicate is used to create a protocol message.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Message"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  JSON model with the created protocol message."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"AppId"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the application identifier for the message."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"CommunityId"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the community identifier for the message."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"TaskId"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the task identifier for the message."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"TransactionId"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the transaction identifier for the message."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"SenderComponent"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the component for the message sender."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"SenderUserId"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the identifier for the message sender."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"ReceiverComponent"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the component for the message receiver."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"ReceiverUserId"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the identifier for the message receiver."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Particle"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the particle for the message."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Content"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model with the content for the message."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_interaction_protocol_engine_send_event(Sent,Event)"),"\nThis predicate is used to send an event.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Sent"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  JSON model with the sent event."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Event"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model with the event to send."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_interaction_protocol_engine_delete_event(Id)"),"\nThis predicate is used to cancel the send on an event.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Id"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the identifier of the event to delete."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_id_of_protocol_event(Id, Event)"),"\nThis predicate is used to obtain the identifier of an event.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Id"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string with the identifier of the event."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Event"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model with the event."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_new_protocol_event(Event,AppId,CommunityId,TaskId,TransactionId,UserId,Delay,Particle,Content)"),"\nThis predicate is used to create a protocol event.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Event"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  JSON model with the created protocol event."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"AppId"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the application identifier for the event."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"CommunityId"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the community identifier for the event."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"TaskId"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the task identifier for the event."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"TransactionId"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the transaction identifier for the event."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"UserId"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the component for the event sender."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Delay"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  number with the seconds to wait before sending the event."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Particle"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the particle for the event."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Content"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model with the content for the event.")))),Object(l.b)("h3",{id:"service"},"Service"),Object(l.b)("p",null,"The next predicates are used to interact with the service component."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_service_api_url_to(Url,Paths)"),"\nThis predicate is used to obtain the URL to interact with the API of the service.\nFor example if ",Object(l.b)("inlineCode",{parentName:"li"},"AppId = '2'")," and the URL of the service API is\n",Object(l.b)("strong",{parentName:"li"},Object(l.b)("a",Object(n.a)({parentName:"strong"},{href:"https://wenet.u-hopper.com/prod/service"}),"https://wenet.u-hopper.com/prod/service"))," then ",Object(l.b)("inlineCode",{parentName:"li"},"wenet_service_api_url_to(Url,['/app/',AppId])"),"\nwill produce ",Object(l.b)("inlineCode",{parentName:"li"},"URL = 'https://wenet.u-hopper.com/prod/service/app/2'"),".",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Url"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string of the API point to the service."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Paths"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  array of values used to build the API point."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_service_manager_get_app(App,Id)"),"\nThis predicate is used to obtain an application.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"App"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  JSON model with the obtained application data."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Id "),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the identifier of the application to obtain."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_id_of_app(Id, App)"),"\nThis predicate obtains the identifier of an application.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Id"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string with the identifier of the application."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"App"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model of the application to obtain the identifier."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_message_callback_url_of_app(Url, App)"),"\nThis predicate obtains the URL to post the callback messages of an application.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Url"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string with the URL to post the callback messages."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"App"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model of the application to obtain the callback URL."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_service_get_app_users(Users,Id)"),"\nThis predicate is used to obtain the users that are in an application.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Users"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  array of strings with the identifiers of users defined in the application."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Id"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the identifier of the application to obtain the users."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_service_get_app_users(Users,App)"),"\nThis predicate is used to obtain the users that are in an application.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Users"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  array of strings with the identifiers of users defined in the application."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"App"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model with the application model."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_new_message(Callback,AppId,ReceiverId,Label,Attributes)"),"\nThis predicate is used to create a callback message to send to an application.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Callback"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  JSON model of strings with the identifiers of users defined in the application."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"AppId"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the identifier of the application to post the message."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"ReceiverId"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the user identifier to post the message."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Label"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the label of the message."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Attributes"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model with the attributes of the message."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_app_id_of_message(Id, Message)"),"\nThis predicate obtains the application identifier of a message.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Id"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string with the identifier of the application."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Task"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model of the message to obtain the application identifier."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_receiver_id_of_message(Id, Message)"),"\nThis predicate obtains the receiver identifier of a message.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Id"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string with the identifier of the receiver."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Task"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model of the message to obtain the receiver identifier."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_label_of_message(Label, Message)"),"\nThis predicate obtains the label of a message.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Label"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string with the label."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Task"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model of the message to obtain the label."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_attributes_of_message(Attributes, Message)"),"\nThis predicate obtains the attributes of a message.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Attributes"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  JSON model with the attributes."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Task"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model of the message to obtain the attributes.")))),Object(l.b)("h3",{id:"incentive-server"},"Incentive server"),Object(l.b)("p",null,"The next predicates are used to interact with the incentive server component."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_incentive_server_api_url_to(Url,Paths)"),"\nThis predicate is used to obtain the URL to interact with the API of the incentive server.\nFor example if the URL of the incentive server API is\n",Object(l.b)("strong",{parentName:"li"},Object(l.b)("a",Object(n.a)({parentName:"strong"},{href:"https://wenet.u-hopper.com/prod/incentive_server"}),"https://wenet.u-hopper.com/prod/incentive_server"))," then ",Object(l.b)("inlineCode",{parentName:"li"},"wenet_incentive_server_api_url_to(Url,['/Tasks/TaskStatus/'])"),"\nwill produce ",Object(l.b)("inlineCode",{parentName:"li"},"URL = 'https://wenet.u-hopper.com/prod/incentive_server/Tasks/TaskStatus/'"),".",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Url"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string of the API point to the incentive server."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Paths"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  array of values used to build the API point."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_incentive_server_update_task_status(Updated,Status)"),"\nThis predicate is used to update the task status.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Updated"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  JSON model with the updated status."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Status"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model with the task status to update."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_new_task_status(Status,AppId,UserId,CommunityId,TaskId,Action,Message)"),"\nThis predicate is used to create the task status.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Status"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  JSON model with the status."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"AppId"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the application identifier of the status."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"UserId"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the user identifier of the status."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"CommunityId"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the community identifier of the status."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"TaskId"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the task identifier of the status."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Action"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the action of the status."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Message"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the message of the status.")))),Object(l.b)("h3",{id:"social-context-builder"},"Social context builder"),Object(l.b)("p",null,"The next predicates are used to interact with the social context builder component."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_social_context_builder_url_to(Url,Paths)"),"\nThis predicate is used to obtain the URL to interact with the API of the social context builder.\nFor example if the URL of the social context builder API is\n",Object(l.b)("strong",{parentName:"li"},Object(l.b)("a",Object(n.a)({parentName:"strong"},{href:"https://wenet.u-hopper.com/prod/social_context_builder"}),"https://wenet.u-hopper.com/prod/social_context_builder"))," , ",Object(l.b)("inlineCode",{parentName:"li"},"UserId = '2'")," and ",Object(l.b)("inlineCode",{parentName:"li"},"TaskId = '1'"),"\nthen ",Object(l.b)("inlineCode",{parentName:"li"},"wenet_social_context_builder_url_to(Url,['/social/explanations/',UserId,'/',TaskId,'/'])"),"\nwill produce ",Object(l.b)("inlineCode",{parentName:"li"},"URL = 'https://wenet.u-hopper.com/prod/social_context_builder/social/explanations/2/1'"),".",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Url"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string of the API point to the social context builder."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Paths"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  array of values used to build the API point."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_social_context_builder_update_preferences(UserId,TaskId,Users)"),"\nThis predicate is used to update the preferences of a user.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"UserId"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the user identifier."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"TaskId"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the task identifier."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Users"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  array of string with the identifiers of the preferred users."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_social_context_builder_retrieve_social_explanation(SocialExplanation,UserId,TaskId)"),"\nThis predicate is used to get the social explanation to choose a user.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"SocialExplanation"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  JSON model with the social explanation."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"UserId"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the user identifier."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"TaskId"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  string with the task identifier."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_description_of_social_explanation(Description, SocialExplanation)"),"\nThis predicate is used to get the description of the social explanation.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Description"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string with the description of the explanation."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"SocialExplanation"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model with the social explanation."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_summary_of_social_explanation(Summary, SocialExplanation)"),"\nThis predicate is used to get the summary of the social explanation.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Summary"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string with the summary of the explanation."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"SocialExplanation"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model with the social explanation.")))),Object(l.b)("h3",{id:"personal-context-builder"},"Personal context builder"),Object(l.b)("p",null,"The next predicates are used to interact with the personal context builder component."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_personal_context_builder_url_to(Url,Paths)"),"\nThis predicate is used to obtain the URL to interact with the API of the personal context builder.\nFor example if the URL of the personal context builder API is\n",Object(l.b)("strong",{parentName:"li"},Object(l.b)("a",Object(n.a)({parentName:"strong"},{href:"https://wenet.u-hopper.com/prod/personal_context_builder"}),"https://wenet.u-hopper.com/prod/personal_context_builder"))," , ",Object(l.b)("inlineCode",{parentName:"li"},"Latitude = 0.2")," , ",Object(l.b)("inlineCode",{parentName:"li"},"Longitude = 0.1"),"\nand ",Object(l.b)("inlineCode",{parentName:"li"},"NumUsers = 4"),"\nthen ",Object(l.b)("inlineCode",{parentName:"li"},"wenet_personal_context_builder_url_to(Url,['/closest/?latitude=',Latitude,'&longitude=',Longitude,'&nb_user_max=',NumUsers])"),"\nwill produce ",Object(l.b)("inlineCode",{parentName:"li"},"URL = 'https://wenet.u-hopper.com/prod/personal_context_builder/closest/?latitude=0.2&longitude=0.1&nb_user_max=4'"),".",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Url"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string of the API point to the personal context builder."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Paths"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  array of values used to build the API point."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_personal_context_builder_locations(Locations,Users)"),"\nThis predicate is used to obtain the locations of a set of users.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Locations"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  array of JSON models with the locations of the users."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Users"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  array of strings with the identifiers of the users to get the locations."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_user_id_of_location(UserId,Location)"),"\nThis predicate is used to obtain the user identifier of a location.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"UserId"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string with the user identifier of the location."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Location"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model with the location to get the user identifier."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_users_of_locations(Users,Locations)"),"\nThis predicate is used to obtain the user identifiers of some locations.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Users"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  array of strings with the user identifiers of the locations."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Locations"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  array of JSON model with the locations to get the user identifiers."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_longitude_of_location(Longitude,Locations)"),"\nThis predicate is used to obtain the longitude of a location.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Longitude"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  number with the longitude of the location."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Location"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model with the location to get the longitude."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_latitude_of_location(Latitude,Locations)"),"\nThis predicate is used to obtain the latitude of a location.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Latitude"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  number with the latitude of the location."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Location"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model with the location to get the latitude."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_personal_context_builder_closest(ClosestUsers,Latitude,Longitude,NumUsers)"),"\nThis predicate is used to obtain the closest users into a location.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"ClosestUsers"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  array of JSON models with the closest users into a location."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Latitude"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  number with the location latitude."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Longitude"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  number with the location longitude."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"NumUsers"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  number with the number maximum users to get."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_user_id_of_closest(UserId,ClosestUser)"),"\nThis predicate is used to obtain the identifier of the user in the closest user location.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"UserId"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  string with the user identifier of the closest user."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"ClosestUser"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model with the closest user."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_distance_of_closest(Distance,ClosestUser)"),"\nThis predicate is used to obtain the distance in the closest user location.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Distance"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  number distance in meters of the closest user to the location."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"ClosestUser"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model with the closest user."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_users_of_closest(Users,ClosestUsers)"),"\nThis predicate is used to obtain the user identifiers of a set of closest users.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Users"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  array of string with the user identifier of the closest users."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"ClosestUsers"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  array of JSON models with the closest users."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_distance_between_locations(Distance,Source,Target)"),"\nThis predicate is used to calculate the haversine distance between two locations.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Distance"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  number with the distance between the locations in meters."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Source"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model with the location as source to calculate the distance."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Target"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model with the location as target to calculate the distance."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_distance_between_locations(Distance,SourceLatitude,SourceLongitude,TargetLatitude,TargetLongitude)"),"\nThis predicate is used to calculate the haversine distance between two locations.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Distance"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  number with the distance between the locations in meters."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"SourceLatitude"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  number with the source latitude to calculate the distance."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"SourceLongitude"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  number with the source longitude to calculate the distance."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"TargetLatitude"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  number with the target latitude to calculate the distance."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"TargetLongitude"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  number with the target longitude to calculate the distance."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"wenet_filter_locations_by_distance(Filtered,Source,Locations,Min,Max)"),"\nThis predicate filters a set of locations if they are on a range to another location.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Filtered"),"  ",Object(l.b)("em",{parentName:"li"},"Output"),"  array of JSON models with the locations that are in the range distance."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Source"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  JSON model with the location to calculate the distance to."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Locations"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  array of JSON models with the locations to filter."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Min"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  number with the minimum distance in meters to the source location. The distance is inclusive."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Max"),"  ",Object(l.b)("em",{parentName:"li"},"Input"),"  number with the maximum distance in meters to the source location. The distance is inclusive.")))))}c.isMDXComponent=!0}}]);